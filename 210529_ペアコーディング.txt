21/05/29

pull requestにはbranchの作成が必要

--------------
21/05/08
１．今回何するんだっけ？
　　・目的
　　　　・プログラミングの経験を積む
　　　　・ペアコーディングを経験する
　　・目標
　　　　・現状、汎用的なデータの品質チェックコードを作成
　　　　→どの程度の質を目指すかも後々検討
　　　　→ある程度のものを作って他の目標に変えてもいい（モデル構築等に移ってもよい）
　　・方針
　　　　・ペアコーディングで作成
　　　　　　・適当な運用を検討
　　　　　　　　・一応、今回をPJとして扱うならルール的なものを考えるのもよい
　　　　　　　　（遊びなので、やりながら必要なものは都度決めていけばよさそう）
　　　　　　　　・例
　　　　　　　　　　・大きな方針として、作業効率は重視しよう
　　　　　　　　　　・とりあえずツールの使い方が分かればそれで良しとしよう
　　　　　　　　　とか
　　　　　　　　→最低限コンフリクトが起こらない
　　　　　　　　→相互レビュー体制（サイクルとかはあんまり考えなくてよい）
　　　　　　・Git等のバージョン管理ツールの使い方を知る
　　　　　　・Docker等での環境構築を知る

２．検討・調査しないといけないこと
　　・ペアコーディングって実際どんな感じ？
　　（後期研修でも経験しなかったので調べてみた）
　　　　・参考：https://techracho.bpsinc.jp/hachi8833/2020_03_19/89692
　　　　　　・「ドライバー」「ナビゲーター」スタイル
　　　　　　　　・戦術担当と戦略担当
　　　　　　・「ピン」「ポン」スタイル
　　　　　　　　・テスト→パス→リファクタリング
　　　　　　　　（大きいPJ向けな気がする。。）
　　　　　　・ストロングスタイル
　　　　　　　　・他方が他方に指示出し
　　　　　　　　（OJTみたいな師弟関係になるので不適）
　　　　　→◎ペア開発スタイル
　　　　　　　　・課題を分担、疑問点は一緒に解消
　　　　・バージョン管理ツール
　　　　　　・以下を整理することが目的（と認識している）
　　　　　　　　・誰がどのファイルをいつ作成、変更、削除したのか
　　　　　　　　　　・変更の場合、具体的にどの部分か
　　　　　　　　・以前に作成したファイルを復元できる
　　　　　　　など
　　　　　　・Gitの使い方
　　　　　　　　・簡単な流れ（メモ書き元に作成したので、間違えてる可能性あり）
　　　　　　　　　　・ファイル作成・更新者
　　　　　　　　　　　　１．ワークツリーでファイル作成、更新
　　　　　　　　　　　　２．ステージに更新情報を乗っける（git addコマンド）
　　　　　　　　　　　　３．ローカルリポジトリに更新情報を保存（git commitコマンド）
　　　　　　　　　　　　４．リモートリポジトリに更新情報を送信（git pushコマンド）
　　　　　　　　　　・ファイル確認者
　　　　　　　　　　　　１．リモートリポジトリからファイルの更新情報を取得してローカルリポジトリに保存（git fetchコマンド）
　　　　　　　　　　　　２．更新情報をワークツリーに反映（git mergeコマンド）
　　　　　　　　※その他、ブランチやリベース等についてこれから調査
　　　　　　　　→一旦研修の内容で必要そうなエッセンスを抽出。整理した手順を試してみて不要なものは削ぐ
　　　　　　・Dockerでの環境構築
　　　　　　　　・Udemy講座の通りに
　　　　　　　　　　・Docker file
　　　　　　　　　　・Docker image　の作成
　　　　　　　※Dockerの復習にもなるので受講
　　　　　　　https://www.udemy.com/course/aidocker/
　　　　　　　　・HubからのpullはDocker Desktopを使ってもOK
